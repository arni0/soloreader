When The Witcher 3 first came out,  in 2015, it didn’t take long for CD
Projekt Red to realise that there was  a big problem with the game’s economy.
You see, a few enterprising players figured  out that they could go to White Orchard,
kill all the cows on the farm,  and sell their leather for cash.
And then, if Geralt meditated to pass some  time… the cows would all come back to life.
So, if you’ve got the patience, you could  repeat this simple process as many times as
you want - and amass infinite wealth before  leaving the very first village in the game.
Whoops.
Look, video game economies can  be very complicated to design,
with all sorts of room for imbalance  and exploits. But if you get it right,
an economy can be a really powerful  tool. It can shape player behaviour,
change the pace of progression, offer up  difficult choices, and create challenging puzzles.
So, in this video I want to give you a  crash course in video game economy design.
I’m going to map out a typical video game economy,
by describing the five basic entities  in the system and the way they connect.
And as we go, I’ll show you how the design  of the economy can change the way we play.
Plus, I’ll let you know how CD Projekt  Red fixed that nasty cow-killing exploit.
I’m Mark Brown, and this is Game Maker’s Toolkit.
So first things first, what is an economy?
Well, in games at least, it’s a term that  describes the flow of resources around a
system. And resources covers just about anything  you can collect - coins, crafting materials,
swords, experience points, ammo....
ARTHUR: "Money!"
So everything from Stardew Valley to Elden Ring
to DOOM Eternal to Pokemon has an economy. And  they share most of the same basic entities.
Let’s start with this one: the tap.  Taps generates new resources into
the economy. That could be enemies who  drop experience points when they die.
A saw mill that harvests wood. A regenerating  health bar. Or rocks that spit out iron ore. Some
taps generate resources automatically, on a timer  - others need to be mined manually, by the player.
Now the thing about taps is that can be  used to incentivise player behaviour. If
you want players to fight monsters, then  you can put loot drops on the enemies.
If you want to push players to explore the world,
then you might put unique crafting materials  in every biome. And if you want players to
punch demons in the face, then shower them with  health points when they glory kill baddies.
Also, just like a real tap… you can change the  flow of resources. This will affect how scarce,
and valuable, a resource is: from rare  ammo drops in a survival horror game,
to an abundance of munitions  in a fast-paced shooter. But,
that can also affect the pace and balance  of the game - more on that in a bit. Oh,
and, in extreme examples, a broken tap  can create economy-busting exploits.
When we get resources from taps, we put  them in our next entity - the inventory.
Which, could be an actual inventory  that you can rummage through.
Or it could describe a simple counter  like a health bar or coin wallet.
Whatever the case, you need to decide if it  has an upper limit or not. Giving players a
maximum carry weight, or forcing them to  stash every gun in a tiny attache case,
can create challenging decisions about  what items are most essential, right now.
And a limit can also be used to stop  players amassing too much wealth - and
it forces them to actually use  these resources and not just
carry a thousand potions until the end of  the game because, you know, just in case.
Now here’s the thing about resources. Some of them
are inherently useful - like swords and guns.  But others, like experience points and money,
don’t actually do anything on their own. They  need to be exchanged for something more useful.
So say hello to our next entity: the converter.  Anything that lets us exchange one resource
for another. Like spending  money on new gear in a shop.
Or crafting a better weapon from raw materials.  Or cashing in experience points to level up.
Now in some games, the cost of a conversion is  going to have an impact on the pace of the game.
For example, if we know how much XP we need to  level up, and how many experience points drop
when an enemy is killed, we’ll know - roughly  - how many enemies the player needs to slay
before gaining new power. And so  that progression can be sped up,
or slowed down - by changing the cost of  the conversion… or the output of the tap.
Now, converters can be a great way to  encourage decision making in the player. Like,
whenever you go to a shop you need to carefully  decide how to spend your limited pool of cash.
But, it’s easy to mess this up.
Look at Ghost of Tsushima: it has about  13 different crafting materials, and most
are directly linked to a specific upgrade. Yew  wood for ranged weapons. Leather for armour. Iron
for your sword. This means that you don’t have to  make a decision about how to use these materials,
because upgrading one bit of gear often  doesn’t impact your ability to upgrade another.
That’s very different to Metro: Exodus, which  only has two crafting materials: components
and chemicals. And pretty much everything you  can make - from ammo to mask filters to health
packs - requires both. So, because crafting one  thing temporarily locks you out from crafting
another, it means you have to be smart and  intentional about everything you bash together.
Having lots of currencies can be great for  encouraging exploration. Or making certain
conversions much rarer than others. But if you  want to create difficult decisions for the player,
have fewer currencies… that can be  spent on lots of different things.
So what are we actually exchanging  these resources for? Well, typically,
it’s something to make the player more powerful,  more efficient, or more resilient. Bigger swords
and better armour, so that they’re ready to face  the challenges in the next part of the game.
But what about if players can  return to the area they just
came from, but now with better gear,  stronger stats, and more health?
Well, for some games, that’s what makes  them fun. Idle games like Cookie Clicker,
and roguelikes with permanent progression  make players repeat the same, or very similar,
content - but each time, with more  power or efficiency than before.
This creates a positive feedback loop - a system  where the output is fed into the input, and then
reinforces the output more strongly. And it can  be very compelling - and dangerously addictive.
But you know what else we might  call repeating the same content
to slowly amass power? Grinding.  And that’s not always what we want.
So, maybe you want to get rid of  this power-creeping feedback loop,
or at least make it less tempting or less tedious.
I mean, you could do what CD Projeckt Red  did when it came to fixing that cow-killing
exploit. In a patch, released a  few months after the game’s launch,
there was a rather cryptic new addition to  the game: the bovine defence force initiative.
And what did the BDFI do? Well, if you killed  six cows in White Orchard… the game would spawn
a level 27 monster nearby, who would rush  in and, well, put a stop to your rampage.
So, that’s certainly one way to fix it. But,  here’s three other smart ways to go about it.
One method is to make that power creep more  interesting, by turning it into a puzzle. Take
a look at Factorio: it has the exact loop I just  described. You start by digging up a small amount
of coal and iron - and then convert those into  plates. You can then use those new resources to
create more drills and furnaces, that will let  you repeat that same process more effectively.
But as you go along - creating conveyer belts  and production lines and different energy
sources - you realise that it’s not just a simple,  obvious loop of gaining power. Instead, it’s a
complex problem-solving headache of automation  and optimisation. Games like Satisfactory and
Stardew Valley are fun, because they challenge  players to figure out how to be more efficient.
What’s the smartest conversion route for  a certain resource? How does the layout of
your factory effect its efficiency? Where are  backlogs and stoppages happening, and how can
you redesign to stamp them out? Can you keep  up with repair and maintenance? And how might a
change in circumstances - like a sudden drop below  minus 100 degrees celsius - change your plans?
Plus, while you can just  slowly amass wealth over time,
you’re encouraged to optimise with  deadlines, rewards, and competing nations.
Another way to get rid of grinding is  to implement a negative feedback loop.
A system that works to balance itself to a  status quo. In. Elden Ring, if you graph out
the number of runes needed to unlock the next  level, then you’ll see that it makes a sharp,
upward curve where it costs more and more  experience points to jump to the next level.
So while you only need to dispatch about 10 guards  in Limgrave to jump from level 9 to level 10,
you’d need to kill hundreds of them to go  from level 49 to 50. By changing the cost
of the conversion in lock step with your level,  Elden Ring makes killing the same simple enemies
over and over again incredibly ineffective  - massively discouraging this tactic. And so
players are pushed to explore further afield,  fight tougher monsters, and take bigger risks.
The final way to deal with grind is to  slow it down, by implementing another economic
entity. The drain. Drains are the opposite of taps  because they permanently remove resources from the
economy. That includes breakable weapons. Losing  health or units. Paying taxes or feeding citizens.
And when you shoot a gun, you’re draining  your ammo count with every bullet fired.
So, just like the power-gaining loop from before,
drains send players back to the tap - but  this time, without getting stronger. Because,
they’re just replacing the stuff that was  lost. So, this slows the player’s power
growth, because they have to spend time and  resources to merely patch up their losses.
But that’s not the only reason drains exist.
They can also force players to get on and act.  A hunger meter that’s constantly going down
forces players to look for food. And  crops that spoil after a certain time
will need to be accounted for in your  optimised schedule. Drains can also
force you to mix up your strategies - Zelda’s  breakable weapons can be a bummer, but they
do make you try out new swords, and encourage  you to explore the world and find replacements.
Drains can also add risk. Back in Elden Ring,  your stash of experience points can be lost
when you die - and, as we saw before,  you need to carry more and more of them
on your person before you can level up.  So this adds a real sense of danger when
exploring new areas - one which grows  and grows the more runes you’re holding.
Or, look at Death Stranding. It’s tempting  to take a huge number of packages at once
for a massive payout, but every extra  box on your back increases the risk of
taking a tumble. And because boxes can  be destroyed - or drained - upon impact,
you’re at risk of losing everything. It’s  all about weighing up the potential reward.
It’s worth noting, though, that drains can also  be positive feedback loops - just for losing power,
rather than gaining it. Consider how in Monopoly,  every time you lose money you become less and less
able to compete with other players, sending you  in a painful downward spiral towards bankruptcy.
I did a whole video on this conundrum,  in the context of losing units in XCOM,
a few years back. I’ll put a link  to it in this video’s end screen.
So, there’s one more type of economic  entity that’s not quite as common,
but can lead to some really interesting gameplay.  It’s the trader. Traders act like other players:
they have their own inventory and resources.  And will buy, sell, and trade stuff based
on their own desires and rules. Think of the  other nations and city states in Civilization.
So, previously, I lumped shops into  converters. And in a lot of games,
that’s exactly how they work: you simply convert  money into items. Like a vending machine.
But look at the merchants in The Witcher  3. Each one has their own stash of items
and wallet of money - and they will buy  and sell items for a different price,
based on what type of shop they run and where  they’re located. This means that enterprising
players can buy items for cheap in one area  - and then sell them for a profit elsewhere.
With traders, we can create complex puzzles  of trade routes and investments - and reward
players for being canny with how resources may be  valued in different places, or at different times.
Though, just like converters, traders can  potentially create a positive feedback loop
of the player getting richer and richer  with every transaction - so you may need to
implement a fix for this. That might involve  modelling supply and demand. In Moonlighter,
a cute game about raiding dungeons and then  selling the loot in your shop - you can flood
the market with an item and drive its price down.  You can’t just repeat the same sale forever.
Or, you could add an element of risk to  the investment. In Animal Crossing you can
buy turnips on a Sunday at a certain  cost. And then, every day that week,
the Nook shop will buy those turnips  for a different price. If you’re lucky,
you can turn a huge profit on  your investment. But if you’re
unlucky, you’ll never see a good price before the  turnips drain out of your inventory next weekend.
It’s basically a miniature stock market,
and by adding a sense of risk and reward, we  not only go some way towards fixing the exploit,
but we add extra decision making. How much am  I willing to risk? What’s the right reward?
So this is our final economy. Resources are  created in taps. We store them in inventories.
We can exchange them for something  more useful with converters - though
sometimes they’ll be lost into  drains and need to be replaced.
And some games may even include traders, who want  to buy and sell their own stock of resources.
As resources flow through the system,  the way these entities are designed
and balanced is going to change the  pace, challenge, and feel of the game.
Of course, this graph is not going to describe  every single game. Simple titles may not have
every single entity, or every route for resources  to flow. And it certainly doesn’t describe
massively multiplayer games and those  with real-world money transactions.
I think I’ll leave that to the in-house  economists and future finance ministers.
Before I go, though… remember that story about  how CD Projekt Red fixed the cow exploit by
spawning a massive monster into White  Orchard? Well, it was all well and good
until higher levels players realised  that this monster could be killed and its head
sold for a huge profit. And all you  needed to do to spawn one was kill a
few cows. So the devs had to patch the game  again. Now, the monster only spawns once.
Like I said, video game  economies can be pretty complicated.
Hey, thanks for watching. This video was originally a lecture I  gave at Breda University of Applied Sciences
in The Netherlands. When I was there, I ended up  giving four different lectures on various topics.
And so if you’re a GMTK Patron on the video  tier, I’ve just released a recording of the
first talk - which is about techniques I use to analyse  games. Thanks so much for supporting this channel.